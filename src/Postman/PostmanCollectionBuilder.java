package Postman;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import javax.persistence.Transient;


import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thoughtworks.paranamer.AnnotationParanamer;
import com.thoughtworks.paranamer.BytecodeReadingParanamer;
import com.thoughtworks.paranamer.CachingParanamer;
import com.thoughtworks.paranamer.Paranamer;

//import corporate_stop.Modules.BusTracking.BusTrackingController;
//import corporate_stop.Modules.Complaints.ComplaintController;
//import corporate_stop.Modules.Diary.MyDiaryController;
//import corporate_stop.Modules.Feedback.FeedbackController;
//import corporate_stop.Modules.FileManager.FIleManagerController;
//import corporate_stop.Modules.Gallery.GalleryController;
//import corporate_stop.Modules.GenericChat.GenericChatController;
//import corporate_stop.Modules.GradeBook.GradeBookController;
//import corporate_stop.Modules.IAUM.IAUMController;
//import corporate_stop.Modules.Leave.LeaveController;
//import corporate_stop.Modules.NoticesModule.NoticesController;
//import corporate_stop.Modules.Search.SearchController;
//import corporate_stop.Modules.SuperAdmin.SuperrAdminController;
//import corporate_stop.Modules.SyllabusTracking.SYTrCOntroller;
//import corporate_stop.Modules.TimeLine.TimeLineController;
//import corporate_stop.Modules.TimeTable.TimeTableController;
//import corporate_stop.controllers.AdminController;
//import corporate_stop.controllers.ClassController;
//import corporate_stop.controllers.ImageUpload;
//import corporate_stop.controllers.LoginController;
//import corporate_stop.controllers.ParentController;
//import corporate_stop.controllers.StudentController;
//import corporate_stop.controllers.SuperAdminController;
//import corporate_stop.controllers.TeacherController;
//import corporate_stop.utils.Constants;
//import corporate_stop.utils.postman.Body;
//import corporate_stop.utils.postman.Formdata;
//import corporate_stop.utils.postman.Info;
//import corporate_stop.utils.postman.Item;
//import corporate_stop.utils.postman.Potsman;
//import corporate_stop.utils.postman.Request;

public class PostmanCollectionBuilder {

	//get all controllers
	//get all requests
	//parse requests
	// set requests in postman 
	//get all unique variables
	//wite json to a file

	static Class[] classes ={
			//			AdminController.class, 
			//			ClassController.class, 
			//			ImageUpload.class,
			//			LoginController.class,
			//			ParentController.class, 
			//			StudentController.class, 
			//			SuperAdminController.class, 
			//			TeacherController.class,
			//			BusTrackingController.class,
			//			ComplaintController.class,
			//			MyDiaryController.class,
			//			FeedbackController.class,
			//			FIleManagerController.class,
			//			GalleryController.class,
			//			GenericChatController.class,
			//			GradeBookController.class,
			//			IAUMController.class,
			//			LeaveController.class,
			//			NoticesController.class,
			//			SearchController.class,
			//			SuperrAdminController.class,
			//			SYTrCOntroller.class,
			//			TimeLineController.class,
			//			TimeTableController.class,
	};


	static Properties prop = new Properties();
	static{
		InputStream in = null;


		try {
			in = new FileInputStream("/home/piyush/Desktop/api_params_mydiary.prop") ; 

		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		try {
			prop.load(in);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	String project_name = "Project";
	String collection_name = project_name+"AutoGenerated";
	String key_value_propery_file_path;



	public static void main(String[] args) throws IOException {



	}



	public static void run(){
		Paranamer info = new CachingParanamer(new AnnotationParanamer(new BytecodeReadingParanamer()));

		String headerVal = UUID.randomUUID().toString();
		Potsman postman = createCollection();
		List<Object> items = new ArrayList<>();
		postman.setItem(items);




		// iterate through all the fucnctions
		for(Class t : classes){
			String prefix = "";
			//			Annotation ann = t.getDeclaredAnnotation(RequestMapping.class);
			//			if(ann!=null){
			//				System.out.println(ann.);
			//				 prefix = ann.annotationType().getAnnotation(RequestMapping.class).value()[0];
			//			}
			if(t.getSimpleName().contains("Login")){
				prefix = "/login/";
			}
			Item folder = createFolder(t.getSimpleName());
			folder.setItem(new ArrayList<Item>());
			items.add(folder);
			for(Method method : t.getDeclaredMethods()){
				if(method.isAnnotationPresent(RequestMapping.class)){
					String value = method.getAnnotation(RequestMapping.class).value()[0];
					String api_name = method.getAnnotation(RequestMapping.class).value()[0];
					String r_method = method.getAnnotation(RequestMapping.class).method()[0].name();
					//	System.out.println(value + " " + r_method);
					value = prefix+value;
					value = "{{url}}"+value;

					Item item  = new Item();
					item.setName(api_name);
					Request request = new Request();
					ArrayList<Formdata> headers = new ArrayList<>();
					Formdata header = new Formdata();
					header.setKey("api-token");
					header.setValue(headerVal);
					headers.add(header);
					request.setHeader(headers);

					String[] parameter_names = info.lookupParameterNames(method);

					if(r_method.equalsIgnoreCase("GET")){
						value+="?";
						for(int i = 0; i < method.getParameterCount(); i++){
							if(method.getParameters()[i].getAnnotation(RequestParam.class)!=null){
								value+="&";
								String val = getValOfParam(method.getParameters()[i], parameter_names[i]);
								value+=parameter_names[i]+"="+val;
							}else if(method.getParameters()[i].getAnnotation(PathVariable.class)!=null){
								//								String val = getValOfParam(method.getParameters()[i], parameter_names[i]);
								//								value = value.replace("{"+parameter_names[i]+"}", val);
							}
						}
					}else{

						Body body = new Body();
						body.setMode("formdata");
						request.setBody(body);
						ArrayList<Formdata> formdatas = new ArrayList<>();
						body.setFormdata(formdatas);

						for(int i=0; i< method.getParameterCount() ; i++){
							if(method.getParameters()[i].getAnnotation(ModelAttribute.class)!=null){
								ArrayList<Formdata> formDataFromModel = getFormDataFromModel(method.getParameters()[i].getType());
								formdatas.addAll(formDataFromModel);
							}else{
								if(method.getParameters()[i].getAnnotation(RequestParam.class)!=null){
									Formdata formdata = new Formdata();
									formdata.setKey(parameter_names[i]);
									formdata.setValue(getValOfParam(method.getParameters()[i], parameter_names[i]));
									formdata.setType("text");
									formdatas.add(formdata);
								}
							}
						}



					}
					System.out.println(value + " " + r_method);


					request.setUrl(value);
					request.setMethod(r_method);
					item.setRequest(request);
					folder.getItem().add(item);
				}
			}
		}


		writeToFile(postman);

	}



	private static String getValOfParam(Parameter parameter, String name) {
		// TODO Auto-generated method stub
		if(prop.containsKey(name)){
			return prop.getProperty(name);
		}
		if(parameter.getType().equals(String.class)){
			return "abcd";
		}else if(parameter.getType().equals(Integer.class)){
			return "2"; 
		}else if(parameter.getType().equals(Double.class)){
			return "2";
		}else if(parameter.getType().equals(Boolean.class)){
			return "false";
		}else{
			return "";
		}
	}

	private static String getValOfParam(Field field) {
		// TODO Auto-generated method stub
		if(prop.containsKey(field.getName())){
			return prop.getProperty(field.getName());
		}
		if(field.getType().equals(String.class)){
			return "abcd";
		}else if(field.getType().equals(Integer.class)){
			return "2"; 
		}else if(field.getType().equals(Double.class)){
			return "2";
		}else if(field.getType().equals(Boolean.class)){
			return "false";
		}else{
			return "";
		}
	}



	private static ArrayList<Formdata> getFormDataFromModel(Class<?> t) {
		ArrayList<Formdata> formdatas = new ArrayList<>();
		for(Field field : t.getDeclaredFields()){
			if(!field.isAnnotationPresent(Transient.class)){
				Formdata formdata = new Formdata();
				formdata.setKey(field.getName());
				formdata.setValue(getValOfParam(field));
				formdata.setType("text");
				formdatas.add(formdata);
			}
		}
		return formdatas;
	}



	private static Item createFolder(String string) {
		// TODO Auto-generated method stub
		Item item = new Item();
		item.setName(string);
		return item;
	}



	private static void writeToFile(Potsman potsman) {
		// TODO Auto-generated method stub

		GsonBuilder gsonb  = new GsonBuilder();
		gsonb.setPrettyPrinting();
		gsonb.disableHtmlEscaping();
		Gson gson  = gsonb.create();
		String answer = gson.toJson(potsman);

		System.out.println(answer);
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream("/home/piyush/Desktop/TestCollection.json"),"ASCII"));
			writer.write(answer);
		} catch (IOException ex) {
			// report
		} finally {
			try {writer.close();} catch (Exception ex) {/*ignore*/}
		}


	}



	public static Potsman createCollection() {
		Potsman postman = new Potsman();
		Info info  = new Info();
		info.setName("MyDiaryAutoGenerated");
		info.setSchema("https://schema.getpostman.com/json/collection/v2.0.0/collection.json");
		postman.setInfo(info);

		return postman;


	}







}
